buildscript {
    ext.kotlin_version = '1.8.21'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'de.hhu.stups'
version = '1.3'
final isSnapshot = project.version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    // The Kotlin plugin automatically adds an api dependency on kotlin-stdlib,
    // but this library doesn't use Kotlin in its external API,
    // so re-declare it as an implementation dependency.
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "de.hhu.stups:alloy-core:5.1.0"
    testImplementation platform('org.junit:junit-bom:5.9.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
    withJavadocJar()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

application {
    mainClass = "de.hhu.stups.alloy2b.Alloy2BKt"
}

// Regenerate .pl files in test resources from the corresponding .als files.
tasks.register("regenerate") {
    dependsOn = ["classes"]
    final resourcesDir = sourceSets.test.resources.srcDirs.iterator().next()
    final files = fileTree(dir: resourcesDir, include: "*.als").files.collectEntries {alloyFile ->
        [alloyFile, new File(alloyFile.toString().replaceAll(/\.als$/, ".pl"))]
    }
    inputs.files(files.keySet())
    outputs.files(files.values())
    
    doLast {
        files.each {alloyFile, prologFile ->
            println("Regenerating ${prologFile.name} from ${alloyFile.name}...")
            javaexec {
                mainClass = application.mainClass
                args = [alloyFile, "-toProlog", prologFile]
                classpath(sourceSets.main.runtimeClasspath)
            }
        }
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': application.mainClass,
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'alloy2b'
                description = 'The Parser for our translation from Alloy to B returning a Prolog Term.'
                url = 'https://github.com/hhu-stups/alloy2b'

                licenses {
                    license {
                        name = 'Eclipse Public License, Version 1.0'
                        url = 'https://www.eclipse.org/org/documents/epl-v10.html'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/hhu-stups/alloy2b.git'
                    developerConnection = 'scm:git:git@github.com:hhu-stups/alloy2b.git'
                    url = 'https://github.com/hhu-stups/alloy2b'
                }

                developers {
                    developer {
                        id = 'JoshuaAtSTUPS'
                        name = 'Joshua Schmidt'
                        email = 'joshua.schmidt@hhu.de'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            final releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            final snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                credentials {
                    username project.ossrhUsername
                    password project.ossrhPassword
                }
            }
        }
    }
}

ext."signing.secretKeyRingFile" = rootProject.file("secring.gpg").absolutePath

signing {
    sign publishing.publications.mavenJava
}
